// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TASKSaver is an autogenerated mock type for the TASKSaver type
type TASKSaver struct {
	mock.Mock
}

// SaveTask provides a mock function with given fields: taskName, taskOwner, taskDate
func (_m *TASKSaver) SaveTask(taskName string, taskOwner string, taskDate string) (int64, error) {
	ret := _m.Called(taskName, taskOwner, taskDate)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (int64, error)); ok {
		return rf(taskName, taskOwner, taskDate)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) int64); ok {
		r0 = rf(taskName, taskOwner, taskDate)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(taskName, taskOwner, taskDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTASKSaver interface {
	mock.TestingT
	Cleanup(func())
}

// NewTASKSaver creates a new instance of TASKSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTASKSaver(t mockConstructorTestingTNewTASKSaver) *TASKSaver {
	mock := &TASKSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
